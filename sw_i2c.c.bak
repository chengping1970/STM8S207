/*SW_I2C.C file
 */

#include "stm8s.h"
#include "stm8s_gpio.h"
#include "stm8s_exti.h"
#include "ir.h"


#define IIC_SCL_PORT			GPIOB
#define IIC_SCL_PIN				GPIO_PIN_4
#define IIC_SDA_PORT			GPIOB
#define IIC_SDA_PIN				GPIO_PIN_5

#define IIC_STOP_PORT			GPIOD
#define IIC_STOP_PIN			GPIO_PIN_3

#define HDMI_RECEIVE_ADDRESS	0x90

#define FPGA_ADDRESS			0xBA

static u16 Read_Width;
static u8 value_0E;
static u8 value_0F;

typedef struct 
{
u8 subaddr;
u8 value;
}
FPDAData_Struct;
static const FPDAData_Struct SECRET_Data[] =
{
	{0xBC, 0x47},
	{0xBD, 0x00},
	{0xBE, 0x00},
	{0xBF, 0x00},
};
static const FPDAData_Struct FPGA_Data_0[] =
{
	{0xB1, 0x00},
	{0x57, 0x6F},
	{0x48, 0x01},
	{0x0D, 0x02},
};

static const FPDAData_Struct FPGA_Data_1[] =
{
	{0xB1, 0x00},
	{0x57, 0x6F},
	{0x48, 0x01},
	{0x0D, 0x22},
};

/*==========================================================================*/
static void _Delay_5us(void)
{
	u8 i;
   	for (i = 0;i < 10;i++);
}
/*==========================================================================*/
static void _SWI2C_Start(void)
{
	GPIO_WriteHigh(IIC_SCL_PORT,IIC_SCL_PIN);
	GPIO_WriteHigh(IIC_SDA_PORT,IIC_SDA_PIN);
	_Delay_5us();
	GPIO_WriteLow(IIC_SDA_PORT,IIC_SDA_PIN);
	_Delay_5us();
	GPIO_WriteLow(IIC_SCL_PORT,IIC_SCL_PIN);
}
/*==========================================================================*/
static void _SWI2C_Stop(void)
{
	GPIO_WriteLow(IIC_SDA_PORT,IIC_SDA_PIN);
	_Delay_5us();
	GPIO_WriteHigh(IIC_SCL_PORT,IIC_SCL_PIN);
	_Delay_5us();
	GPIO_WriteHigh(IIC_SDA_PORT,IIC_SDA_PIN);
}
/*==========================================================================*/
static u8 _SWI2C_WriteByte(u8 value)
{
	u8 count;
	
	for (count = 0;count < 8;count++)
	{
		if (value&0x80)
		{
			GPIO_WriteHigh(IIC_SDA_PORT,IIC_SDA_PIN);
		}
		else
		{
			GPIO_WriteLow(IIC_SDA_PORT,IIC_SDA_PIN);
		}
		_Delay_5us();
		GPIO_WriteHigh(IIC_SCL_PORT,IIC_SCL_PIN);
		_Delay_5us();
		GPIO_WriteLow(IIC_SCL_PORT,IIC_SCL_PIN);
		value = value<<1;
	}
	GPIO_WriteHigh(IIC_SDA_PORT,IIC_SDA_PIN);
	GPIO_Init(IIC_SDA_PORT, IIC_SDA_PIN, GPIO_MODE_IN_FL_NO_IT);
	_Delay_5us();
	GPIO_WriteHigh(IIC_SCL_PORT,IIC_SCL_PIN);
	for (count = 0;count < 20;count++)
	{
		if (GPIO_ReadInputPin(IIC_SDA_PORT, IIC_SDA_PIN) == 0)
		{
			GPIO_WriteLow(IIC_SCL_PORT,IIC_SCL_PIN);
			GPIO_Init(IIC_SDA_PORT, IIC_SDA_PIN, GPIO_MODE_OUT_OD_LOW_FAST);
			return TRUE;
		}
	}
	GPIO_WriteLow(IIC_SCL_PORT,IIC_SCL_PIN);
	GPIO_Init(IIC_SDA_PORT, IIC_SDA_PIN, GPIO_MODE_OUT_OD_HIZ_FAST);
	
	return FALSE;
}
/*==========================================================================*/
static u8 _SWI2C_ReadByte(u8 send_ack)
{
	u8 count, read, value = 0;

	GPIO_Init(IIC_SDA_PORT, IIC_SDA_PIN, GPIO_MODE_IN_FL_NO_IT);
	for (count = 0;count < 8;count++)
	{
		_Delay_5us();
		GPIO_WriteHigh(IIC_SCL_PORT,IIC_SCL_PIN);
		if (GPIO_ReadInputPin(IIC_SDA_PORT, IIC_SDA_PIN))
		{
			read = 1;
		}
		else
		{
			read = 0;
		}
		value = (value<<1)|read;
		_Delay_5us();
		GPIO_WriteLow(IIC_SCL_PORT,IIC_SCL_PIN);
	}
	GPIO_Init(IIC_SDA_PORT, IIC_SDA_PIN, GPIO_MODE_OUT_OD_HIZ_FAST);
	if (send_ack)
	{
		GPIO_WriteLow(IIC_SDA_PORT,IIC_SDA_PIN);
	}
	else
	{
		GPIO_WriteHigh(IIC_SDA_PORT,IIC_SDA_PIN);
	}
	_Delay_5us();
	GPIO_WriteHigh(IIC_SCL_PORT,IIC_SCL_PIN);
	_Delay_5us();
	GPIO_WriteLow(IIC_SCL_PORT,IIC_SCL_PIN);
	_Delay_5us();

	return  value;		
}
/*==========================================================================*/
u8 SWI2C_Read(u8 addr, u8 subaddr)
{
	u8 value;
	
	_SWI2C_Start();
	_SWI2C_WriteByte(addr);
	_SWI2C_WriteByte(subaddr);
	_SWI2C_Start();
	_SWI2C_WriteByte(addr|0x01);
	value = _SWI2C_ReadByte(FALSE);
	_SWI2C_Stop();

	return value;
}
/*==========================================================================*/
u8 SWI2C_ReadBytes(u8 addr, u8 subaddr, u8 number, u8 * p_data)
{	
	_SWI2C_Start();
	_SWI2C_WriteByte(addr);
	_SWI2C_WriteByte(subaddr);
	_SWI2C_Start();
	_SWI2C_WriteByte(addr|0x01);
	while (number--)
	{
		*p_data = _SWI2C_ReadByte(number);
		p_data++;
	}
	_SWI2C_Stop();

	return TRUE;
}
/*==========================================================================*/
void SWI2C_Write(u8 addr, u8 subaddr, u8 value)
{	
	_SWI2C_Start();
	_SWI2C_WriteByte(addr);
	_SWI2C_WriteByte(subaddr);
	_SWI2C_WriteByte(value);
	_SWI2C_Stop();
}
/*==========================================================================*/
void SWI2C_Write2Byte(u8 addr, u8 subaddr, u16 data) 
{	                                             
	_SWI2C_Start();                              
	_SWI2C_WriteByte(addr);                      
	_SWI2C_WriteByte(subaddr);                   
	_SWI2C_WriteByte(data>>8);                   
	_SWI2C_WriteByte(data);                      
	_SWI2C_Stop();                               
}                                                    

/*==========================================================================*/
u8 SWI2C_WriteBytes(u8 addr, u8 subaddr, u8 number, u8 * p_data)
{	
	_SWI2C_Start();
	_SWI2C_WriteByte(addr);
	_SWI2C_WriteByte(subaddr);
	while (number--)
	{
		_SWI2C_WriteByte(*p_data);
		p_data++;
	}
	_SWI2C_Stop();
	return TRUE;
}
/*==========================================================================*/
void SWI2C_Init(void)
{
	GPIO_Init(IIC_SCL_PORT, IIC_SCL_PIN, GPIO_MODE_OUT_OD_HIZ_FAST);
	GPIO_Init(IIC_SDA_PORT, IIC_SDA_PIN, GPIO_MODE_OUT_OD_HIZ_FAST);
	GPIO_WriteHigh(IIC_SCL_PORT,IIC_SCL_PIN);
	GPIO_WriteHigh(IIC_SDA_PORT,IIC_SDA_PIN);
	
	/*	
	Read_Width = 0;
	value_0E = 0x70;
	value_0F = 0x16;
	*/	

	GPIO_Init(GPIOC, GPIO_PIN_4, GPIO_MODE_OUT_PP_HIGH_FAST);//FPGA_rst
	GPIO_Init(GPIOC, GPIO_PIN_5, GPIO_MODE_OUT_PP_LOW_FAST);//Main_PWR
	//GPIO_Init(GPIOC, GPIO_PIN_7, GPIO_MODE_OUT_PP_LOW_FAST);//Backlight_On
	GPIO_Init(GPIOC, GPIO_PIN_6, GPIO_MODE_OUT_PP_LOW_FAST);//PWM
	GPIO_Init(GPIOG, GPIO_PIN_0, GPIO_MODE_OUT_PP_HIGH_FAST);//LVDS_PW
	GPIO_Init(GPIOD, GPIO_PIN_7, GPIO_MODE_OUT_PP_HIGH_FAST);//RS
	GPIO_Init(GPIOA, GPIO_PIN_2, GPIO_MODE_OUT_PP_HIGH_FAST); //IIC_en
	GPIO_Init(GPIOB, GPIO_PIN_0, GPIO_MODE_OUT_PP_HIGH_FAST);//RX_RST
	GPIO_Init(GPIOE, GPIO_PIN_0, GPIO_MODE_OUT_PP_HIGH_FAST);//LED
}
/*==========================================================================*/
void SWI2C_Update(void)
{
	;
}

/*==========================================================================*/
/*
/* need to unlock the IIC secuirty **********/
void SWI2C_UnlockSecu(void)
{
	u8 i;
	u8 secret_ok = FALSE;
	while (!secret_ok)
	{
		for (i = 0;i < 4;i++)
		{
			SWI2C_Write(FPGA_ADDRESS, SECRET_Data[i].subaddr, SECRET_Data[i].value);
		}
		if (SWI2C_Read(FPGA_ADDRESS, SECRET_Data[0].subaddr) == 0xBA)
		{
			secret_ok = TRUE;
		}
		
		if (GPIO_ReadInputPin(IIC_STOP_PORT,IIC_STOP_PIN) == 0)
		{
			return;
		}	
	}


}



/*
 void FPGA_Init(void)
 {
	SWI2C_Write(0xBA, 0x0D, 0x26);
 	SWI2C_Write(0xBA, 0x57, 0x00);	
 	SWI2C_Write(0xBA, 0x47, 0x10); 
	SWI2C_Write(0xBA, 0x48, 0x01); 
	SWI2C_Write(0xBA, 0x49, 0x85);
	SWI2C_Write(0xBA, 0xc9, 0x1F);//rendering
	SWI2C_Write(0xBA, 0xc8, 0x90);
	SWI2C_Write(0xBA, 0xcb, 0xB8);
	SWI2C_Write(0xBA, 0xca, 0x20);
	SWI2C_Write(0xBA, 0x59, 0x00);
	SWI2C_Write(0xBA, 0x5A, 0x00);
	SWI2C_Write(0xBA, 0x5c, 0x00);
}

*/


static const FPDAData_Struct FPGA_Data[] =
{                                         
 #if 1                                     
//	{0x0E, 0x70},                     
//	{0x0F, 0x16},                                         
#endif                                    
	{0xA4, 0x14},                     
};                                        

#define FPGA_MODE_SUBADDR	0xC6
static const u16 smooth_data[] =
{  
 0x8118
,0x9228
,0x9338
,0x9448
,0x9558
,0x9668
,0x9778
,0x9888
,0x9118
,0x9118
,0x9118
,0x9118
,0x9118
,0x9118
,0x9118
,0x9118
,0x9118
,0x9118
,0x9118
,0x9118
,0x9118
,0x9118
,0x9118
,0x9118
,0x9118
,0x9008
,0x9008
,0xA008
,0x1008
,0x2003
,0x3001
,0x4002
,0x5001
,0xF000
};

void SWI2C_SetWeaving(void)
{
	u8 i;
	
	
	for (i = 0;i < sizeof(smooth_data)/2;i++)   
	{
	SWI2C_Write2Byte(FPGA_ADDRESS, FPGA_MODE_SUBADDR, smooth_data[i]);               
  }

}
static u8 OnOff_3D = TRUE;

void SWI2C_Set3D(void)
{
	

	
  	u8 i;
	u8 reg_value;
	OnOff_3D = !OnOff_3D;
	if (OnOff_3D)
	{
		reg_value = 0x6F;
	}
	else
	{
		reg_value = 0x0;
	}
	SWI2C_Write(FPGA_ADDRESS, 0x57, reg_value);
	
	for (i = 0;i < sizeof(smooth_data)/2;i++)   
	{
	SWI2C_Write2Byte(FPGA_ADDRESS, FPGA_MODE_SUBADDR, smooth_data[i]);               
  }
}

void FPGA_Init(void)
 {
	GPIO_Init(GPIOC, GPIO_PIN_4, GPIO_MODE_OUT_PP_HIGH_FAST);//FPGA_rst
	
	SWI2C_UnlockSecu();
	
	SWI2C_Write(0xBA, 0x0D, 0x26);
  	SWI2C_Write(0xBA, 0x57, 0x80);
//  	SWI2C_Write(0xBA, 0x57, 0x00);
 	SWI2C_Write(0xBA, 0x58, 0x17);	
 	SWI2C_Write(0xBA, 0x47, 0x10); 
//	SWI2C_Write(0xBA, 0x48, 0x01); 
	SWI2C_Write(0xBA, 0x48, 0x1);			// for plus angle on the 46 inch  
	SWI2C_Write(0xBA, 0x0d, 0x22);		// for rgb (not rbg) on the 46 inch samsung

	SWI2C_Write(0xBA, 0x18, 0x0);	
	SWI2C_Write(0xBA, 0x49, 0x85);
	
	//SWI2C_Write(0xBA, 0xc9, 0x2b);//rendering
	//SWI2C_Write(0xBA, 0xc8, 0x05);
	//SWI2C_Write(0xBA, 0xcb, 0x92);
	//SWI2C_Write(0xBA, 0xca, 0x1a);
	
	//NanJaio_20150204//
	/*
	SWI2C_Write(0xBA, 0xc9, 0x1d);//rendering
	SWI2C_Write(0xBA, 0xc8, 0x05);
	SWI2C_Write(0xBA, 0xcb, 0x26);
	SWI2C_Write(0xBA, 0xca, 0x1a);
	
	SWI2C_Write(0xBA, 0x59, 0x46);
	SWI2C_Write(0xBA, 0x5A, 0x80);
	SWI2C_Write(0xBA, 0x5c, 0x73);
	*/
	
	
	//Eidolon_39_001_20150425//
/*	SWI2C_Write(0xBA, 0xc9, 0x5a);//rendering
	SWI2C_Write(0xBA, 0xc8, 0x05);
	SWI2C_Write(0xBA, 0xcb, 0xb4);
	SWI2C_Write(0xBA, 0xca, 0x19);
*/	
	SWI2C_Write(0xBA, 0xc9, 0x64);//rendering Eidolon_65_001_20150515
	SWI2C_Write(0xBA, 0xc8, 0x04);
	SWI2C_Write(0xBA, 0xcb, 0x65);
	SWI2C_Write(0xBA, 0xca, 0x19);
	
	SWI2C_Write(0xBA, 0x59, 0x40);
	SWI2C_Write(0xBA, 0x5A, 0x80);
	SWI2C_Write(0xBA, 0x5c, 0x80);
	
	
	
	SWI2C_Set3D();
	
	
 }



void SWI2C_SetInsertLine(u8 value)
{
	u8 i;

	if (value)
	{
		for (i = 0;i <  sizeof(FPGA_Data_1)/sizeof(FPDAData_Struct);i++)
		{
			SWI2C_Write(FPGA_ADDRESS, FPGA_Data_1[i].subaddr, FPGA_Data_1[i].value);
		}
	}
	else
	{
		for (i = 0;i <  sizeof(FPGA_Data_0)/sizeof(FPDAData_Struct);i++)
		{
			SWI2C_Write(FPGA_ADDRESS, FPGA_Data_0[i].subaddr, FPGA_Data_0[i].value);
		}
	}
}


/*==========================================================================*/
void HotPlug(u8 value)
{
	if (value)
	{
		GPIO_WriteHigh(GPIOB,GPIO_PIN_6);
	}
	else
	{
		GPIO_WriteLow(GPIOB,GPIO_PIN_6);
	}
}
/*==========================================================================*/
/*==========================================================================*/
void SWI2C_Reset_0E_0F(void)
{
	value_0E = 0x40;
	value_0F = 0x80;
	SWI2C_Write(FPGA_ADDRESS, 0x59, 0x40);
	SWI2C_Write(FPGA_ADDRESS, 0x5C, 0x80);
}
/*==========================================================================*/
void SWI2C_Change_0E(u8 direct)
{
	if (direct)
	{
		if (value_0E < 0xFF)
		{
			value_0E++;
		}
	}
	else
	{
		if (value_0E > 0)
		{
			value_0E--;
		}
	}
	SWI2C_Write(FPGA_ADDRESS, 0x59, value_0E);
}
/*==========================================================================*/
void SWI2C_Change_0F(u8 direct)
{
	if (direct)
	{
		if (value_0F < 0xFF)
		{
			value_0F++;
		}
	}
	else
	{
		if (value_0F > 0)
		{
			value_0F--;
		}
	}
	SWI2C_Write(FPGA_ADDRESS, 0x5C, value_0F);
}
/*==========================================================================*/



/*==========================================================================*/
static const u8 deep_value[6][3] =
{
	//* 0x59 0x5C 0x5A 
	{0x30, 0x80, 0x60},
	{0x50, 0x70, 0x70},
	{0x70, 0x60, 0x80},
	{0x90, 0x50, 0x90},
	{0xA0, 0x40, 0xA0},
	{0xA8, 0x30, 0xA0},
	};
void SWI2C_Set_deep(u8 deep)
{
	SWI2C_Write(FPGA_ADDRESS, 0x59, deep_value[deep][0]);
	SWI2C_Write(FPGA_ADDRESS, 0x5C, deep_value[deep][1]);
	SWI2C_Write(FPGA_ADDRESS, 0x5A, deep_value[deep][2]);
}
/*==========================================================================*/

